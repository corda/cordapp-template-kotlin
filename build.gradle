import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import static org.gradle.api.JavaVersion.VERSION_17

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'net.corda.cordapp.cordapp-configuration'
    id 'org.jetbrains.kotlin.plugin.jpa'
    id 'java'
    id 'maven-publish'
    id 'net.corda.gradle.plugin'
}

allprojects {
    group 'com.r3.developers.cordapptemplate'
    version '1.0-SNAPSHOT'

    def javaVersion = VERSION_17

    // Configure Corda runtime gradle plugin
    cordaRuntimeGradlePlugin {
        runtimeVersion = cordaRuntimeVersion
        notaryVersion = cordaNotaryPluginsVersion
        notaryCpiName = "NotaryServer"
        corDappCpiName = "MyCorDapp"
        cpiUploadTimeout = cpiUploadDefault
        vnodeRegistrationTimeout = vnodeRegistrationTimeoutDefault
        cordaProcessorTimeout = processorTimeout
        workflowsModuleName = workflowsModule
        cordaClusterURL = "https://localhost:8888"
        cordaRestUser = "admin"
        cordaRestPasswd ="admin"
        composeFilePath = "config/combined-worker-compose.yaml"
        networkConfigFile = "config/static-network-config.json"
        r3RootCertFile = "config/r3-ca-key.pem"
        skipTestsDuringBuildCpis = skipContractTestsDuringBuildCpis
        cordaRuntimePluginWorkspaceDir = workspaceDirectory
        cordaBinDir = "${System.getProperty("user.home")}/$cordaBinariesDirectory"
        cordaCliBinDir = "${System.getProperty("user.home")}/$cordaCliBinariesDirectory"

        // Only need to supply these if you want to use an unpublished version
        artifactoryUsername = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
        artifactoryPassword = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
    }

    // Declare the set of Kotlin compiler options we need to build a CorDapp.
    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            allWarningsAsErrors = false

            // Specify the version of Kotlin that we are that we will be developing.
            languageVersion = '1.8'
            // Specify the Kotlin libraries that code is compatible with
            apiVersion = '1.8'
            // Note that we Need to use a version of Kotlin that will be compatible with the Corda API.
            // Currently that is developed in Kotlin 1.7 so picking the same version ensures compatibility with that.

            // Specify the version of Java to target.
            jvmTarget = javaVersion

            // Needed for reflection to work correctly.
            javaParameters = true

            // -Xjvm-default determines how Kotlin supports default methods.
            // JetBrains currently recommends developers use -Xjvm-default=all
            // https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-default/
            freeCompilerArgs += [
                    "-Xjvm-default=all"
            ]
        }
    }

    repositories {
        // All dependencies are held in Maven Central
        mavenLocal()
        mavenCentral()

        // R3 Internal repositories for dev
        // Repository provides Corda 5 binaries that implement Corda-API.
        // These will be made publicly available.
        // Final location to be decided.
        // Repository subject to change
        maven {
            url = "$artifactoryContextUrl/corda-os-maven"
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
}

publishing {
    publications {
            maven(MavenPublication) {
                artifactId "corda-dev-template-kotlin-sample"
                groupId project.group
                artifact jar
         }
    }
}
